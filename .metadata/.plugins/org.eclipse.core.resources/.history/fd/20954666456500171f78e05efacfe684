def getRebootTime():
	# $language = "Python"
	# $interface = "1.0"
	import time,datetime,os

	repeatTime = 50
	time1Sum = 0.0
	time2Sum = 0.0
	time3Sum = 0.0
	manufactory = "fengxing"
	reporter = "liqianqian"

	crt.Screen.Send ("su\n")
	crt.Screen.Send ("setprop persist.logd.logpersistd logcatd\n")
	crt.Screen.Send ("clear\n")
	crt.Screen.Send ("ls /mnt/usb\n")
	time.sleep(0.5)
	paras1 = crt.Screen.Get2(2, 0, 2, 50)
	paras1 = paras1.strip()
	logcatPath = "/mnt/usb/" + str(paras1) + "/crtLogcat_reboot/"
	screenPath = "/mnt/usb/" + str(paras1) + "/crtScreen_reboot/"
	crt.Screen.Send ("mkdir " + logcatPath + "\n")
	crt.Screen.Send ("mkdir " + screenPath + "\n")

	crt.Screen.Send ("clear\n")
	time.sleep(1)
	crt.Screen.Send ("getprop |grep ro.build.version.incremental\n")
	time.sleep(1)
	paras1 = crt.Screen.Get2(1, 0, 30, 50 )
	rom_version = paras1[paras1.find("[ro.build.version.incremental]") + 30:]
	rom_version = rom_version[rom_version.find("[") + 1:rom_version.find("]")]

	crt.Screen.Send ("clear\n")
	time.sleep(1)
	crt.Screen.Send ("getprop |grep ro.product.screen.artmodel\n")
	time.sleep(1)
	paras2 = crt.Screen.Get2(1, 0, 30, 50 )
	screenModel = paras2[paras2.find("[ro.product.screen.artmodel]") + 30:]
	screenModel = screenModel[screenModel.find("[") + 1:]
	screenModel = screenModel[:screenModel.find("]")]

	crt.Screen.Send ("clear\n")
	time.sleep(1)
	crt.Screen.Send ("getprop |grep persist.sys.chiptype\n")
	time.sleep(1)
	paras3 = crt.Screen.Get2(1, 0, 30, 50 )
	platform = paras3[paras3.find("[persist.sys.chiptype]") + 10:]
	platform = platform[platform.find("[") + 1:]
	platform = platform[:platform.find("]")]


	fileDir = 'd:/crtScriptsRecord/' + platform + '/'
	if os.path.exists(fileDir) == False:
		os.makedirs(fileDir)
	filePath = fileDir + 'getRebootTime_' + rom_version + '.txt'

	recordFile = open(filePath, 'a')
	recordFile.write('===============start doing reboot, time:' + str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")) + '===============\n')
	recordFile.write('\tstage1\tstage2\tstage3\n')
	recordFile.close()

	timeStamp = str(datetime.datetime.now().strftime("%Y-%m-%d__%H-%M-%S"))
	crt.Screen.Send ("irlock 1\n")

	for i in range (repeatTime):
		crt.Screen.Send ("irlock 1\n")
		crt.Screen.Send ("the " + str(i + 1) + "th time for doing reboot\n")
		time.sleep(3)
		crt.Screen.Send ("reboot\n")
		crt.Screen.WaitForString("AC_ON")
		d1 = datetime.datetime.now()
		crt.Screen.WaitForString("[AN] [FUN] end: 1st stage logo" )
		d2 = datetime.datetime.now()
		time1 = float((d2 - d1).seconds) + float((d2 - d1).microseconds)/1000000
		time1Sum = time1Sum + time1
		
		crt.Screen.WaitForString("[AN] [FUN] start: bootanim" )
		d1 = datetime.datetime.now()
		time2 = float((d1 - d2).seconds) + float((d1 - d2).microseconds)/1000000
		time2Sum = time2Sum + time2
		
		crt.Screen.WaitForString("[AN] [FUN] stopped : bootanim" )
		d2 = datetime.datetime.now()
		time3 = float((d2 - d1).seconds) + float((d2 - d1).microseconds)/1000000
		time3Sum = time3Sum + time3

		crt.Screen.Send ("su\n")
		
		recordFile = open(filePath, 'a')
		recordFile.write(str(i + 1) + '\t' + str(time1) + '\t\t' + str(time2) + '\t\t' + str(time3) + '\n')
		recordFile.close()
		
		crt.Screen.Send ("mkdir " + logcatPath + timeStamp + "\n")
		time.sleep(1)
		if i == repeatTime - 1:
			crt.Screen.Send ("cp /sdcard/funtvlog/log.* " + logcatPath + timeStamp + "\n")
		time.sleep(2)
		timeStamp1 = str(datetime.datetime.now().strftime("%Y-%m-%d__%H-%M-%S"))
		crt.Screen.Send ("screencap -p " + screenPath + timeStamp1 + "_" + str(i + 1) + ".png\n")

		time.sleep(10)
	crt.Screen.Send ("irlock 0\n")
	date = str(datetime.datetime.now().strftime("%Y-%m-%d"))
	avgTime1 = str(time1Sum/repeatTime)
	avgTime1 = avgTime1[:avgTime1.find('.') + 2]
	avgTime2 = str(time2Sum/repeatTime)
	avgTime2 = avgTime2[:avgTime2.find('.') + 2]
	avgTime3 = str(time3Sum/repeatTime)
	avgTime3 = avgTime3[:avgTime3.find('.') + 2]
	os.system("python dbOperate.py rebootTime  " + date + " " + avgTime1 + " " + avgTime2 + " " + avgTime3 + " " +\
			   rom_version + " " + manufactory + " " + platform + " " + screenModel + " " + str(repeatTime) + " " + reporter)
	   
	recordFile = open(filePath, 'a')
	recordFile.write('ave\t' + str(time1Sum/repeatTime) + '\t\t' + str(time2Sum/repeatTime) + '\t\t' + str(time3Sum/repeatTime) + '\n')
	recordFile.write('===============end doing reboot:' + str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")) + '===============\n\n\n\n')
	recordFile.close()

def getFactoryTime():
	# $language = "Python"
	# $interface = "1.0"
	import time,datetime,os

	repeatTime = 50
	time1Sum = 0.0
	time2Sum = 0.0
	time3Sum = 0.0
	time4Sum = 0.0
	reporter = "liqianqian"
	manufactory = "fengxing"

	crt.Screen.Send ("su\n")
	crt.Screen.Send ("clear\n")
	crt.Screen.Send ("ls /mnt/usb\n")
	time.sleep(0.5)
	paras1 = crt.Screen.Get2(2, 0, 2, 50)
	paras1 = paras1.strip()
	logcatPath = "/mnt/usb/" + str(paras1) + "/crtLogcat_factory/"
	screenPath = "/mnt/usb/" + str(paras1) + "/crtScreen_factory/"
	crt.Screen.Send ("mkdir " + logcatPath + "\n")
	crt.Screen.Send ("mkdir " + screenPath + "\n")

	crt.Screen.Send ("clear\n")
	time.sleep(1)
	crt.Screen.Send ("getprop |grep ro.build.version.incremental\n")
	time.sleep(1)
	paras1 = crt.Screen.Get2(1, 0, 30, 50 )
	rom_version = paras1[paras1.find("[ro.build.version.incremental]") + 30:]
	rom_version = rom_version[rom_version.find("[") + 1:rom_version.find("]")]

	crt.Screen.Send ("clear\n")
	time.sleep(1)
	crt.Screen.Send ("getprop |grep ro.product.screen.artmodel\n")
	time.sleep(1)
	paras2 = crt.Screen.Get2(1, 0, 30, 50 )
	screenModel = paras2[paras2.find("[ro.product.screen.artmodel]") + 30:]
	screenModel = screenModel[screenModel.find("[") + 1:]
	screenModel = screenModel[:screenModel.find("]")]

	crt.Screen.Send ("clear\n")
	time.sleep(1)
	crt.Screen.Send ("getprop |grep persist.sys.chiptype\n")
	time.sleep(1)
	paras3 = crt.Screen.Get2(1, 0, 30, 50 )
	platform = paras3[paras3.find("[persist.sys.chiptype]") + 10:]
	platform = platform[platform.find("[") + 1:]
	platform = platform[:platform.find("]")]

	crt.Screen.Send ("setprop persist.logd.logpersistd logcatd\n")

	fileDir = 'd:/crtScriptsRecord/' + platform + '/'
	if os.path.exists(fileDir) == False:
		os.makedirs(fileDir)
	filePath = fileDir + 'getFactoryTime_' + rom_version + '.txt'
	recordFile = open(filePath, 'a')
	recordFile.write('===============start doing factory, time:' + str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")) + '===============\n')
	recordFile.write('\tstage1\tstage2\tstage3\ttotal\n')
	recordFile.close()

	for i in range (repeatTime):
		time.sleep(5)
		crt.Screen.Send ("am start -n tv.fun.settings/.general.GeneralSettingsActivity\n")
		time.sleep(5)
		crt.Screen.Send ("the " + str(i + 1) + "the time for doing factory reset\n")
		time.sleep(3)
		for j in range (8):
			crt.Screen.Send ("input keyevent 20\n")
			time.sleep(1)
		crt.Screen.Send ("input keyevent 23\n")
		time.sleep(1)
		crt.Screen.Send ("input keyevent 19\n")
		time.sleep(1)
		crt.Screen.Send ("input keyevent 23\n")
		time.sleep(1)
		crt.Screen.Send ("input keyevent 20\n")
		time.sleep(1)
		timeStamp = str(datetime.datetime.now().strftime("%Y-%m-%d__%H-%M-%S"))
		crt.Screen.Send ("mkdir " + logcatPath + timeStamp + "\n")
		time.sleep(1)
		crt.Screen.Send ("cp /sdcard/funtvlog/log.* " + logcatPath + timeStamp + "\n")
		time.sleep(3)
		crt.Screen.Send ("screencap -p " + screenPath + timeStamp + "_" + str(i + 1) + ".png\n")
		time.sleep(3)
		dstart = datetime.datetime.now()
		crt.Screen.Send ("input keyevent 23\n")
		
		crt.Screen.WaitForString("Starting kernel")
		crt.Screen.WaitForString("Starting kernel")
		d1 = datetime.datetime.now()
		crt.Screen.WaitForString("[AN] [FUN] end: 1st stage logo")
		d2 = datetime.datetime.now()
		time1 = float((d2 - d1).seconds) + float((d2 - d1).microseconds)/1000000
		time1Sum = time1Sum + time1
		
		crt.Screen.WaitForString("[AN] [FUN] start: bootanim" )
		d1 = datetime.datetime.now()
		time2 = float((d1 - d2).seconds) + float((d1 - d2).microseconds)/1000000
		time2Sum = time2Sum + time2
		
		crt.Screen.WaitForString("[AN] [FUN] stopped : bootanim" )
		d2 = datetime.datetime.now()
		time3 = float((d2 - d1).seconds) + float((d2 - d1).microseconds)/1000000
		time3Sum = time3Sum + time3
		time4 = float((d2 - dstart).seconds) + float((d2 - dstart).microseconds)/1000000
		time4Sum = time4Sum + time4
		
		crt.Screen.Send ("irlock 1\n")
		time.sleep(15)
		crt.Screen.Send ("input keyevent 4\n")
		time.sleep(15)
		crt.Screen.Send ("su\n")
		crt.Screen.Send ("setprop persist.logd.logpersistd logcatd\n")
		
		recordFile = open(filePath, 'a')
		recordFile.write(str(i + 1) + '\t' + str(time1) + '\t\t' + str(time2) + '\t\t' + str(time3) + '\t\t' + str(time4) + '\n')
		recordFile.close()
		
		if time4 > 200:
			os.system("python sendEmail.py factoryTimeTooLong the_" + str(i + 1) + "th_time")

	crt.Screen.Send ("irlock 0\n")
	date = str(datetime.datetime.now().strftime("%Y-%m-%d"))
	avgTime1 = str(time1Sum/repeatTime)
	avgTime1 = avgTime1[:avgTime1.find('.') + 2]
	avgTime2 = str(time2Sum/repeatTime)
	avgTime2 = avgTime2[:avgTime2.find('.') + 2]
	avgTime3 = str(time3Sum/repeatTime)
	avgTime3 = avgTime3[:avgTime3.find('.') + 2]
	avgTime4 = str(time4Sum/repeatTime)
	avgTime4 = avgTime4[:avgTime4.find('.') + 2]
	os.system("python dbOperate.py factoryTime " + str(date) + " " + avgTime4 + " " + avgTime1 + " " + avgTime2 + " " + avgTime3 + " " + rom_version + " " + manufactory + " " + platform + " " + screenModel + " " + str(repeatTime) + " " +reporter)

	time.sleep(10)	
	recordFile = open(filePath, 'a')
	recordFile.write('ave\t' + avgTime1 + '\t\t' + avgTime2 + '\t\t' + avgTime3 + '\t\t' + avgTime4 + '\n')
	recordFile.write('===============end doing factory:' + str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")) + '===============\n\n\n\n')
	recordFile.close()

getRebootTime()
getFactoryTime()